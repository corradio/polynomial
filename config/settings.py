"""
Django settings for polynomial project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import logging
import os
from pathlib import Path
from typing import List

from celery.schedules import crontab
from environs import Env

from integrations.implementations.linkedin import LinkedIn

env = Env()
env.read_env()  # read .env file, if it exists

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str(
    "SECRET_KEY",
    default="django-insecure-pc4)q6#@l865x7317^$u3&+6$bymh5zwg&!&lv2m*(qnrft3*#",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=False)

if DEBUG:
    logging.basicConfig(level=logging.DEBUG)

ALLOWED_HOSTS: List[str] = (
    ["*"]
    if DEBUG
    else [
        "127.0.0.1",
        "localhost",
        "polynomial.fly.dev",
        "polynomial.so",
    ]
)

# The following needs to be set to None in order to make sure
# the `opener` property keeps being filled during OAuth popups
SECURE_CROSS_ORIGIN_OPENER_POLICY = None

if DEBUG:
    CSRF_TRUSTED_ORIGINS = ["https://*.ngrok-free.app"]
else:
    CSRF_TRUSTED_ORIGINS = ["https://polynomial.so"]


# Ensure that Django correctly understands that it's operating under HTTPS
# if it's behind a proxy
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_jsonform",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.linkedin_oauth2",
    "compressor",
    "widget_tweaks",
    "django_extensions",
    "mainapp",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# Django will search for static files here
STATICFILES_DIRS = [
    BASE_DIR / "static",
    ("integrations/icons", BASE_DIR / "integrations/icons"),
]
STATICFILES_FINDERS = (
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    "compressor.finders.CompressorFinder",
)

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": env.dj_db_url(
        "DATABASE_URL", default="postgres://postgres:mypassword@127.0.0.1:5432/database"
    ),
}

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": env.str("REDIS_URL", default="redis://127.0.0.1:6379"),
    }
}

AUTH_USER_MODEL = "mainapp.User"


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Authentication
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "AUTH_PARAMS": {
            "access_type": "online",
        },
        "APP": {
            "client_id": env.str("GOOGLE_CLIENT_ID", default=None),
            "secret": env.str("GOOGLE_CLIENT_SECRET", default=None),
        },
    },
    "linkedin_oauth2": {
        "PROFILE_FIELDS": [
            "id",
            "first-name",
            "last-name",
            "email-address",
            "picture-url",
            "public-profile-url",
            "profilePicture(displayImage~:playableStreams)",
        ],
        "APP": {
            "client_id": env.str("LINKEDIN_CLIENT_ID", default=None),
            "secret": env.str("LINKEDIN_CLIENT_SECRET", default=None),
        },
        # LinkedIn will remove authorization to scopes not requested,
        # and thus integration scopes must be given here to avoid the
        # login process to break already configured integrations.
        "SCOPE": ["r_basicprofile", "r_emailaddress"] + LinkedIn.scopes,
    },
}
SOCIALACCOUNT_QUERY_EMAIL = True
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"
# See https://django-allauth.readthedocs.io/en/latest/configuration.html
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_SUBJECT_PREFIX = "[Polynomial] "
ACCOUNT_PREVENT_ENUMERATION = False  # Required due to https://github.com/corradio/polynomial/issues/106#issuecomment-1484779724
ACCOUNT_LOGOUT_ON_GET = True

if not DEBUG:
    ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https"
    USE_X_FORWARDED_HOST = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Celery settings
CELERY_BROKER_URL = env.str("REDIS_URL", default="redis://127.0.0.1:6379")
CELERY_RESULT_BACKEND = env.str("REDIS_URL", default="redis://127.0.0.1:6379")
CELERY_BEAT_SCHEDULE = {
    "collect_all_latest": {
        "task": "mainapp.tasks.collect_all_latest_task",
        "schedule": crontab(minute="0", hour="2"),
    },
    "export": {
        "task": "mainapp.tasks.spreadsheet_export_all",
        "schedule": crontab(minute="0", hour="4"),
    },
}
CELERY_TASK_TIME_LIMIT = 16 * 60  # seconds
CELERY_TASK_SOFT_TIME_LIMIT = 15 * 60  # seconds
CELERY_BROKER_TRANSPORT_OPTIONS = {
    "socket_timeout": 30,
    "retry_on_timeout": True,
    "health_check_interval": 30,
    "socket_keepalive": True,
}
CELERY_RESULT_BACKEND_ALWAYS_RETRY = True
CELERY_RESULT_BACKEND_MAX_RETRIES = 3
CELERY_RESULT_BACKEND_TRANSPORT_OPTIONS = CELERY_BROKER_TRANSPORT_OPTIONS
CELERY_TASK_TRACK_STARTED = True
CELERY_WORKER_SEND_TASK_EVENTS = True
CELERY_REDIS_SOCKET_TIMEOUT = 30
CELERY_REDIS_RETRY_ON_TIMEOUT = True
CELERY_REDIS_BACKEND_HEALTH_CHECK_INTERVAL = 30
CELERY_REDIS_SOCKET_KEEPALIVE = True

# Static deployment
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
# This is the place where the static files will be collected before deployment
STATIC_ROOT = BASE_DIR / "static_root"

# SMTP
EMAIL_HOST = "smtp.eu.mailgun.org"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = env.str("EMAIL_HOST_USER", default=None)
EMAIL_HOST_PASSWORD = env.str("EMAIL_HOST_PASSWORD", default=None)
EMAIL_SUBJECT_PREFIX = "[Polynomial] "
ADMINS = [("Olivier", "admin@polynomial.so")]
DEFAULT_FROM_EMAIL = "admin@polynomial.so"
if DEBUG:
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# Compressor
COMPRESS_ENABLED = True
COMPRESS_OFFLINE = not DEBUG

# Posthog
from posthog import Posthog
from posthog.exception_capture import Integrations

Posthog(
    env.str("POSTHOG_API_KEY", default=""),
    enable_exception_autocapture=True,
    exception_autocapture_integrations=[Integrations.Django],
)
